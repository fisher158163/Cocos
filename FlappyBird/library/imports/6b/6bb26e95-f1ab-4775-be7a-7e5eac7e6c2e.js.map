{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "const Bird = require('Bird');\r\nconst Background = require('Background');\r\nconst Constant = require('Constant'); \r\n\r\nvar Storage = require('Storage');\r\n\r\nvar Game = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 管道纵向最大偏移值\r\n        pipeMaxOffsetY: 150,\r\n        // 上下管道间最小间隙\r\n        pipeMinGap: 80,\r\n        // 上下管道间最大间隙\r\n        pipeMaxGap: 150,\r\n        // 管道生成时间间隔\r\n        pipeSpawnInterval: 4.5,\r\n        // 管道生成时，屏幕外横向偏移位置\r\n        pipeSpawnOffsetX: 30,\r\n        // 重新刷新时间\r\n        gameReflashTime: 5,\r\n        // 形变动画播放间隔\r\n        scoreScaleDuration: 0.2,\r\n        // 游戏菜单节点\r\n        gameMenu: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // 小鸟对象\r\n        bird: {\r\n            default: null,\r\n            type: Bird\r\n        },\r\n        // 管道创建节点\r\n        pipesNode: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // 管道预制数组\r\n        pipePrefabs: {\r\n            default: [],\r\n            type: [cc.Prefab]\r\n        },\r\n        // 地板对象\r\n        background: {\r\n            default: null,\r\n            type: Background\r\n        },\r\n        // 游戏失败文字标签\r\n        gameOverText: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        // 当前分数标签\r\n        scoreText: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        // 最高分标签\r\n        highScoreText: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        // 初始化触摸事件\r\n        this.setInputControl();\r\n        // 初始化管道数组\r\n        this.pipes = [];\r\n        // 获取屏幕尺寸\r\n        this.size = cc.winSize;\r\n        // 获取地板的包围盒\r\n        var groundBox = this.background.groundNode[0].getBoundingBox();\r\n        // 获取地板顶部的纵坐标\r\n        this.groundTop = groundBox.y + groundBox.height/2;\r\n        // 初始化游戏失败标志位\r\n        this.isGameOver = false;\r\n        // 初始化当前分数\r\n        this.curScore = 0;\r\n        // 开始游戏界面，如有历史最高分则显示该成绩\r\n        if ( Storage.getHighScore() > 0 ) {\r\n            this.highScoreText.string = Constant.HIGHSCORE_TXT + Storage.getHighScore();\r\n        }\r\n    },\r\n\r\n    setInputControl: function() {\r\n        var self = this;\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\r\n            onTouchBegan: self._onTouchBegan.bind(self)\r\n        }, self.node);\r\n    },\r\n    \r\n    _onTouchBegan: function( touch, event ) {\r\n        if ( this.isGameOver === true )\r\n            return;\r\n        this.bird.onJump();\r\n    },    \r\n    \r\n    onStartGame: function () {\r\n        // 关闭菜单节点显示\r\n        this.gameMenu.active = false;\r\n        // 小鸟开始下落\r\n        this.bird.onStartDrop();\r\n        // 从0开始显示分数\r\n        this.scoreText.string = \"\" + this.curScore;\r\n        // 启动管道生成定时器\r\n        this.schedule(this.spawnPipes, this.pipeSpawnInterval);\r\n        // 启动游戏逻辑更新定时器\r\n        this.schedule(this.gameUpdate, Constant.GROUND_MOVE_INTERVAL);\r\n    },\r\n\r\n    spawnPipes: function() {\r\n        // 从管道预制（上端），生成管道实例\r\n        var pipeUp = cc.instantiate(this.pipePrefabs[Constant.PIPE_UP]);\r\n        // 定义为上端类型\r\n        pipeUp.getComponent('Pipe').init(Constant.PIPE_UP);\r\n        // 获取管道的高度（上端与上端的相同）\r\n        var pipeHeight = pipeUp.getComponent('cc.Sprite').spriteFrame.getRect().height;\r\n        // 设置上端管道的横向起始位置（屏幕右端另加一定偏移）\r\n        pipeUp.x = this.size.width / 2 + this.pipeSpawnOffsetX;\r\n        // 设置上端管道的纵向起始位置（随机取偏移量）\r\n        pipeUp.y = Math.floor(Math.random() * this.pipeMaxOffsetY) + pipeHeight/2;\r\n        // 下端生成逻辑基本与上端相同\r\n        var pipeDown = cc.instantiate(this.pipePrefabs[Constant.PIPE_DOWN]);\r\n        pipeDown.getComponent('Pipe').init(Constant.PIPE_DOWN);\r\n        pipeDown.x = this.size.width / 2 + this.pipeSpawnOffsetX;\r\n        // 随机生成上端与下端管道之间的间隙值（pipeMinGap与pipeMaxGap之间）\r\n        var pipeGap = Math.floor(Math.random() * (this.pipeMaxGap - this.pipeMinGap)) + this.pipeMinGap;\r\n        pipeDown.y = pipeUp.y - pipeGap - pipeHeight;\r\n        // 添加管道到pipes节点上\r\n        this.pipesNode.addChild(pipeUp);\r\n        this.pipesNode.addChild(pipeDown);\r\n        // 添加管道到管道数组中\r\n        this.pipes.push(pipeUp);\r\n        this.pipes.push(pipeDown);\r\n    },\r\n\r\n    gameUpdate: function() {\r\n        for ( var i = 0; i < this.pipes.length; i ++ ) {\r\n            // 获取当前管道对象节点\r\n            var curPipeNode = this.pipes[i];\r\n            // 对管道进行移动操作\r\n            curPipeNode.x += Constant.GROUND_VX;\r\n            \r\n            // 获取小鸟的包围盒\r\n            var birdBox = this.bird.node.getBoundingBox();\r\n            // 获取当前管道的包围盒\r\n            var pipeBox = curPipeNode.getBoundingBox();\r\n            // var birdRect = new cc.Rect(birdBox.x - birdBox.width / 2, birdBox.y - birdBox.height / 2,\r\n            //     birdBox.width, birdBox.height);\r\n            // var pipeRect = new cc.Rect(pipeBox.x - pipeBox.width / 2, pipeBox.y - pipeBox.height / 2,\r\n            //     pipeBox.width, pipeBox.height);\r\n            // 根据两个矩形范围判断是否相交\r\n            if (cc.Intersection.rectRect(birdBox, pipeBox)) {\r\n                this.onGameOver();\r\n                return;\r\n            }\r\n            \r\n            // 获取当前管道对象\r\n            var curPipe = curPipeNode.getComponent('Pipe');\r\n            // 判断小鸟是否顺利通过管道，是则加分\r\n            if ( curPipeNode.x < this.bird.node.x && curPipe.isPassed === false \r\n                && curPipe.type === Constant.PIPE_UP) {\r\n                curPipe.isPassed = true;\r\n                this.addScore();\r\n            }\r\n            \r\n            // 超出屏幕范围的管道，从数组中移除，并从节点上删除\r\n            if ( curPipeNode.x < -(this.size.width/2 + Constant.PIPE_SPAWN_OFFSET_X)) {\r\n                this.pipes.splice(i, 1);\r\n                this.pipesNode.removeChild(curPipeNode, true);\r\n            } \r\n        }\r\n        \r\n        // 小鸟触地，则死亡\r\n        if (this.bird.node.y < this.groundTop ) {\r\n            this.onGameOver();\r\n        }\r\n    },\r\n    \r\n    addScore: function() {\r\n        // 加分\r\n        this.curScore ++;\r\n        // 显示当前分数\r\n        this.scoreText.string = \"\" + this.curScore;\r\n        var action1 = cc.scaleTo(this.scoreScaleDuration, 1.1, 0.6);\r\n        var action2 = cc.scaleTo(this.scoreScaleDuration, 0.8, 1.2);\r\n        var action3 = cc.scaleTo(this.scoreScaleDuration, 1, 1);\r\n        // 播放形变动画\r\n        this.scoreText.node.runAction(cc.sequence(action1, action2, action3));\r\n    },\r\n    \r\n    onGameOver: function() {\r\n        // 设置游戏失败标志位\r\n        this.isGameOver = true;\r\n        // 游戏失败，如超过最高分则成绩\r\n        if ( this.curScore > Storage.getHighScore() ) {\r\n            Storage.setHighScore(this.curScore);\r\n        }\r\n        // 死亡时，显示“Game Over”\r\n        this.gameOverText.string = Constant.GAMEOVER_TXT;\r\n        // 关闭所有定时器\r\n        this.bird.unscheduleAllCallbacks();\r\n        this.background.unscheduleAllCallbacks();\r\n        this.unscheduleAllCallbacks();\r\n        // 一定时间后，重新刷新游戏到开始状态\r\n        this.schedule(function() {\r\n            cc.director.loadScene('game');\r\n        }, this.gameReflashTime);\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}